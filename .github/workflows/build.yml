name: Build & Test

on:
  push:
    branches: [ "main" ]

concurrency:
  group: build-main
  cancel-in-progress: true

permissions:
  contents: write  # needed to create GitHub Release

jobs:
  ci:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Detect release commit & bump version
        id: release
        if: startsWith(github.event.head_commit.message, 'release:')
        shell: bash
        run: |
          set -euo pipefail
          msg='${{ github.event.head_commit.message }}'
          # Accept semver with optional pre-release portion (e.g., 1.2.3-rc1)
          version=$(echo "$msg" | sed -nE 's/^release:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.-]+)?)$/\1/p')
          if [[ -z "$version" ]]; then
            echo "No semantic version found in release commit message. Skipping bump."; exit 0; fi
          echo "Detected release version: $version"
          mvn -q -f backend/pom.xml versions:set -DnewVersion="$version" -DgenerateBackupPoms=false
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add backend/pom.xml
          git commit -m "chore: release version $version [skip ci]"
          # Defer tag + push until build success to avoid tagging broken build
          echo "version=$version" >> $GITHUB_OUTPUT
          if [[ "$version" == *-* ]]; then echo "prerelease=true" >> $GITHUB_OUTPUT; else echo "prerelease=false" >> $GITHUB_OUTPUT; fi

      - name: Build & Test Backend (Maven verify + Jacoco XML)
        shell: bash
        run: |
          set -euo pipefail
          ./backend/mvnw -f backend/pom.xml clean verify jacoco:report

      - name: Check Jacoco XML Report Exists
        shell: bash
        run: |
          set -euo pipefail
          rep=backend/target/site/jacoco/jacoco.xml
          if [[ ! -f "$rep" ]]; then
            echo "Missing Jacoco XML: $rep" >&2; exit 1; fi

      - name: Extract Project Version
        id: projver
        shell: bash
        run: |
          set -euo pipefail
          ver=$(./backend/mvnw -q -f backend/pom.xml help:evaluate -Dexpression=project.version -DforceStdout)
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "Backend version: $ver"

      # Publish Coverage Job Summary
      - name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.7.2
        with:
          paths: ${{ github.workspace }}/backend/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 85
          min-coverage-changed-files: 85
          comment-type: both

      - name: Copy JAR Artifact (used only for release assets)
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ steps.projver.outputs.version }}'
          jarPath="backend/target/project-f-backend-${ver}.jar"
          if [[ ! -f "$jarPath" ]]; then
            echo "Jar $jarPath not found" >&2
            ls -1 backend/target || true
            exit 1
          fi
          cp "$jarPath" "project-f-backend-${ver}.jar"

      - name: Setup Flutter (stable)
        if: success()
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Cache Flutter Pub
        if: success()
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            frontend/.dart_tool
          key: flutter-pub-${{ runner.os }}-${{ hashFiles('frontend/pubspec.lock') }}
          restore-keys: |
            flutter-pub-${{ runner.os }}-

      - name: Flutter Pub Get
        if: success()
        working-directory: frontend
        run: flutter pub get

      - name: Generate Dart Code
        if: success()
        working-directory: frontend
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Flutter Build Web
        if: success()
        working-directory: frontend
        run: flutter build web --release

      - name: Tag & Push Release (only after successful build)
        if: success() && steps.release.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          version='${{ steps.release.outputs.version }}'
          git tag "v$version"
          git push origin HEAD:main --tags
          echo "Tagged and pushed v$version"

      - name: Package Frontend Web Dist (only on release)
        if: success() && steps.release.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ steps.projver.outputs.version }}'
          tarball="frontend-web-dist-${ver}.tar.gz"
          tar -czf "$tarball" -C frontend/build/web .
          ls -lh "$tarball"

      - name: Generate Checksums (only on release)
        if: success() && steps.release.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ steps.projver.outputs.version }}'
          sha256sum project-f-backend-${ver}.jar frontend-web-dist-${ver}.tar.gz > checksums.txt
          echo "Generated checksums:"; cat checksums.txt

      - name: Generate Changelog
        id: changelog
        if: steps.release.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          prev_tag=$(git describe --tags --abbrev=0 v${{ steps.release.outputs.version }}^ 2>/dev/null || echo "")
          if [ -n "$prev_tag" ]; then
            log=$(git --no-pager log --pretty=format:'- %s' ${prev_tag}..HEAD)
          else
            log=$(git --no-pager log --pretty=format:'- %s')
          fi
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.release.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release.outputs.version }}
          name: Release ${{ steps.release.outputs.version }}
          prerelease: ${{ steps.release.outputs.prerelease }}
          body: |
            Changelog:
            ${{ steps.changelog.outputs.log }}
          files: |
            project-f-backend-${{ steps.projver.outputs.version }}.jar
            frontend-web-dist-${{ steps.projver.outputs.version }}.tar.gz
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
